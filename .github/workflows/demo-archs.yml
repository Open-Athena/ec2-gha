name: Demo â€“ 2 GPU instances with different architectures
on:
  workflow_dispatch:
  workflow_call:   # Tested by `demos.yml`
permissions:
  id-token: write  # Required for AWS OIDC authentication
  contents: read   # Required for actions/checkout
jobs:
  # Launch EC2 runners for each instance type
  g4dn:
    name: Launch g4dn
    uses: ./.github/workflows/runner.yml
    with:
      ec2_instance_type: g4dn.xlarge
    secrets: inherit
  g4ad:
    name: Launch g4ad
    uses: ./.github/workflows/runner.yml
    with:
      ec2_instance_type: g4ad.xlarge
    secrets: inherit

  # Run jobs directly on launched instances
  test-g4dn:
    needs: g4dn
    if: needs.g4dn.outputs.id != ''
    name: Test g4dn
    runs-on: ${{ needs.g4dn.outputs.id }}
    steps:
    - name: GPU test on g4dn.xlarge
      run: nvidia-smi  # Verify GPU is available
  test-g4ad:
    needs: g4ad
    if: needs.g4ad.outputs.id != ''
    name: Test g4ad
    runs-on: ${{ needs.g4ad.outputs.id }}
    steps:
    - name: GPU test on g4ad.xlarge
      run: |
        lspci | grep -i "vga\|display\|3d\|amd"

  # Use a `matrix` to run jobs on multiple instances
  test-matrix:
    needs: [g4dn, g4ad]
    if: always() && (needs.g4dn.outputs.id != '' || needs.g4ad.outputs.id != '')
    name: Test ${{ matrix.instance }} (matrix)
    continue-on-error: true
    strategy:
      matrix:
        include:
          - instance: g4dn
            runner: ${{ needs.g4dn.outputs.id }}
          - instance: g4ad
            runner: ${{ needs.g4ad.outputs.id }}
      fail-fast: false
    runs-on: ${{ matrix.runner }}
    steps:
    - name: Matrix GPU test on ${{ matrix.instance }}.xlarge
      run: |
        echo "Running on ${{ matrix.instance }}.xlarge"
        echo "Instance type: $(curl -s http://169.254.169.254/latest/meta-data/instance-type)"

        # Check GPU based on instance type
        if [[ "${{ matrix.instance }}" == "g4dn" ]]; then
          echo "Testing NVIDIA GPU..."
          nvidia-smi
        elif [[ "${{ matrix.instance }}" == "g4ad" ]]; then
          echo "Testing AMD GPU..."
          lspci | grep -i "vga\|display\|3d\|amd"
        fi
