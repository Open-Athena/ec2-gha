# serializer version: 1
# name: test_build_aws_params
  dict({
    'IamInstanceProfile': dict({
      'Name': 'test',
    }),
    'ImageId': 'ami-0772db4c976d21e9b',
    'InstanceInitiatedShutdownBehavior': 'terminate',
    'InstanceType': 't2.micro',
    'MaxCount': 1,
    'MinCount': 1,
    'SecurityGroupIds': list([
      'test',
    ]),
    'SubnetId': 'test',
    'TagSpecifications': list([
      dict({
        'ResourceType': 'instance',
        'Tags': list([
          dict({
            'Key': 'Name',
            'Value': 'test',
          }),
          dict({
            'Key': 'Owner',
            'Value': 'test',
          }),
          dict({
            'Key': 'Repository',
            'Value': 'Open-Athena/ec2-gha',
          }),
          dict({
            'Key': 'Workflow',
            'Value': 'CI',
          }),
          dict({
            'Key': 'URL',
            'Value': 'https://github.com/Open-Athena/ec2-gha/actions/runs/16725250800',
          }),
        ]),
      }),
    ]),
    'UserData': '''
      #!/bin/bash
      set -e
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
      log_error() { log "ERROR: $1" >&2; }
      
      flush_cloudwatch_logs() {
        log "Stopping CloudWatch agent to flush logs"
        if systemctl is-active --quiet amazon-cloudwatch-agent; then
          systemctl stop amazon-cloudwatch-agent 2>/dev/null \
          || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
          || true
        fi
      }
      
      cat > /usr/local/bin/runner-common-functions.sh << 'EOCF'
      #!/bin/bash
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
      flush_cloudwatch_logs() {
        log "Stopping CloudWatch agent to flush logs"
        if systemctl is-active --quiet amazon-cloudwatch-agent; then
          systemctl stop amazon-cloudwatch-agent 2>/dev/null \
          || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
          || true
        fi
      }
      EOCF
      
      get_metadata() {
        local path="$1"
        local token=$(curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 300" http://169.254.169.254/latest/api/token 2>/dev/null || true)
        if [ -n "$token" ]; then
          curl -s -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
        else
          curl -s "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
        fi
      }
      
      logger "EC2-GHA: Starting userdata script"
      trap 'logger "EC2-GHA: Script failed at line $LINENO with exit code $?"' ERR
      
      INSTANCE_ID=$(get_metadata "instance-id")
      
      terminate_instance() {
        local reason="$1"
        log "FATAL: $reason"
        log "Terminating instance $INSTANCE_ID due to setup failure"
      
        if [ -f "$homedir/config.sh" ] && [ -n "${RUNNER_TOKEN:-}" ]; then
          cd "$homedir" && ./config.sh remove --token "${RUNNER_TOKEN}" || true
        fi
      
        flush_cloudwatch_logs
        shutdown -h now
        exit 1
      }
      
      trap 'terminate_instance "Setup script failed with error on line $LINENO"' ERR
      
      REGISTRATION_TIMEOUT="300"
      if ! [[ "$REGISTRATION_TIMEOUT" =~ ^[0-9]+$ ]]; then
        logger "EC2-GHA: Invalid timeout '$REGISTRATION_TIMEOUT', using default 300"
        REGISTRATION_TIMEOUT=300
      fi
      logger "EC2-GHA: Registration timeout set to $REGISTRATION_TIMEOUT seconds"
      (
        log "Watchdog: Starting $REGISTRATION_TIMEOUT second timeout"
        sleep $REGISTRATION_TIMEOUT
        if [ ! -f /var/run/github-runner-registered ]; then
          log "Watchdog: Registration marker not found after timeout"
          terminate_instance "Runner failed to register within $REGISTRATION_TIMEOUT seconds"
        else
          log "Watchdog: Registration marker found, exiting normally"
        fi
      ) &
      REGISTRATION_WATCHDOG_PID=$!
      log "Watchdog PID: $REGISTRATION_WATCHDOG_PID"
      echo $REGISTRATION_WATCHDOG_PID > /var/run/github-runner-watchdog.pid
      
      
      
      homedir="/home/ec2-user"
      
      if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
        for user in ubuntu ec2-user centos admin debian fedora alpine arch; do
          if id "$user" &>/dev/null; then
            homedir="/home/$user"
            log "Auto-detected: $homedir"
            break
          fi
        done
      
        if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
          homedir=$(getent passwd | awk -F: '$3 >= 1000 && $3 < 65534 && $6 ~ /^\/home\// {print $6}' | while read dir; do
            if [ -d "$dir" ]; then
              echo "$dir"
              break
            fi
          done)
      
          if [ -z "$homedir" ]; then
            homedir="/home/ec2-user"  # Ultimate fallback
            log "Using fallback: $homedir"
          else
            owner=$(stat -c "%U" "$homedir" 2>/dev/null || stat -f "%Su" "$homedir" 2>/dev/null)
            log "Detected: $homedir ($owner)"
          fi
        fi
      else
        log "Using: $homedir"
      fi
      
      INSTANCE_TYPE=$(get_metadata "instance-type")
      INSTANCE_ID=$(get_metadata "instance-id")
      REGION=$(get_metadata "placement/region")
      AZ=$(get_metadata "placement/availability-zone")
      
      exec >> /var/log/runner-setup.log 2>&1
      log "Starting runner setup"
      
      log "Instance metadata: Type=${INSTANCE_TYPE} ID=${INSTANCE_ID} Region=${REGION} AZ=${AZ}"
      
      MAX_LIFETIME_MINUTES=360
      log "Setting up maximum lifetime timeout: ${MAX_LIFETIME_MINUTES} minutes"
      nohup bash -c "sleep ${MAX_LIFETIME_MINUTES}m && echo '[$(date)] Maximum lifetime reached' && shutdown -h now" > /var/log/max-lifetime.log 2>&1 &
      
      if [ "" != "" ]; then
        log "Installing CloudWatch agent"
        (
      
          log "Waiting for dpkg lock to be released..."
          timeout=120
          while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
            if [ $timeout -le 0 ]; then
              log "WARNING: dpkg lock timeout, proceeding anyway"
              break
            fi
            log "dpkg is locked, waiting... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done
      
          wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E ./amazon-cloudwatch-agent.deb
          rm amazon-cloudwatch-agent.deb
      
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
      {
        "agent": {
          "run_as_user": "cwagent"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                { "file_path": "/var/log/runner-setup.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-setup", "timezone": "UTC" },
                { "file_path": "/tmp/job-started-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-started", "timezone": "UTC" },
                { "file_path": "/tmp/job-completed-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-completed", "timezone": "UTC" },
                { "file_path": "/tmp/termination-check.log", "log_group_name": "", "log_stream_name": "{instance_id}/termination", "timezone": "UTC" },
                { "file_path": "/home/ec2-user/_diag/Runner_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-diag", "timezone": "UTC" },
                { "file_path": "/home/ec2-user/_diag/Worker_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/worker-diag", "timezone": "UTC" }
              ]
            }
          }
        }
      }
      EOF
      
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
            -s
      
          log "CloudWatch agent started"
        ) || log "WARNING: CloudWatch agent installation failed, continuing without it"
      fi
      
      if [ -n "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" ]; then
        log "Configuring SSH access"
      
        DEFAULT_USER=$(stat -c "%U" "$homedir" 2>/dev/null || echo "root")
      
        mkdir -p "/home/ec2-user/.ssh"
        chmod 700 "/home/ec2-user/.ssh"
      
        echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" >> "$homedir/.ssh/authorized_keys"
        chmod 600 "$homedir/.ssh/authorized_keys"
      
        if [ "$DEFAULT_USER" != "root" ]; then
          chown -R "$DEFAULT_USER:$DEFAULT_USER" "$homedir/.ssh"
        fi
      
        log "SSH key added for user $DEFAULT_USER"
      fi
      
      log "Working directory: $homedir"
      cd "$homedir"
      
      echo "echo 'Hello, World!'" > pre-runner-script.sh
      log "Running pre-runner script"
      source pre-runner-script.sh
      export RUNNER_ALLOW_RUNASROOT=1
      ARCH=$(uname -m)
      if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
        RUNNER_URL=$(echo "test.tar.gz" | sed 's/x64/arm64/g')
        log "ARM detected, using: $RUNNER_URL"
      else
        RUNNER_URL="test.tar.gz"
        log "x64 detected, using: $RUNNER_URL"
      fi
      curl -L $RUNNER_URL -o runner.tar.gz
      log "Extracting runner"
      tar --no-overwrite-dir -xzf runner.tar.gz
      cat > /usr/local/bin/job-started-hook.sh << 'EOFS'
      #!/bin/bash
      exec >> /tmp/job-started-hook.log 2>&1
      V="/var/run/github-runner"
      echo "[$(date)] Job started: ${GITHUB_JOB}"
      mkdir -p $V-jobs
      echo '{"status":"running"}' > $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
      touch $V-last-activity $V-has-run-job
      EOFS
      
      cat > /usr/local/bin/job-completed-hook.sh << 'EOFC'
      #!/bin/bash
      exec >> /tmp/job-completed-hook.log 2>&1
      V="/var/run/github-runner"
      echo "[$(date)] Job completed: ${GITHUB_JOB}"
      rm -f $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
      touch $V-last-activity
      EOFC
      
      cat > /usr/local/bin/check-runner-termination.sh << EOFT
      #!/bin/bash
      exec >> /tmp/termination-check.log 2>&1
      source /usr/local/bin/runner-common-functions.sh
      V="/var/run/github-runner"
      A="\$V-last-activity"
      J="\$V-jobs"
      H="\$V-has-run-job"
      D="$homedir"
      T="test"
      
      [ ! -f "\$A" ] && touch "\$A"
      L=\$(stat -c %Y "\$A" 2>/dev/null || echo 0)
      N=\$(date +%s)
      I=\$((N-L))
      [ -f "\$H" ] && G=\${RUNNER_GRACE_PERIOD:-60} || G=\${RUNNER_INITIAL_GRACE_PERIOD:-180}
      R=\$(grep -l '"status":"running"' \$J/*.job 2>/dev/null | wc -l || echo 0)
      
      if [ \$R -eq 0 ] && [ \$I -gt \$G ]; then
        log "TERMINATING: idle \$I > grace \$G"
        if [ -f "\$D/config.sh" ]; then
          cd "\$D" && pkill -INT -f "Runner.Listener" 2>/dev/null || true
          sleep 2
          log "Deregistering runner..."
          RUNNER_ALLOW_RUNASROOT=1 ./config.sh remove --token \$T 2>&1
          log "Deregistration exit: \$?"
        else
          log "ERROR: config.sh not found at \$D"
        fi
        flush_cloudwatch_logs
        log "Shutting down"
        sudo shutdown -h now
      else
        [ \$R -gt 0 ] && log "\$R job(s) running" || log "Idle \$I/\$G sec"
      fi
      EOFT
      
      chmod +x /usr/local/bin/runner-common-functions.sh /usr/local/bin/job-started-hook.sh /usr/local/bin/job-completed-hook.sh /usr/local/bin/check-runner-termination.sh
      
      echo "ACTIONS_RUNNER_HOOK_JOB_STARTED=/usr/local/bin/job-started-hook.sh" > .env
      echo "ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/usr/local/bin/job-completed-hook.sh" >> .env
      echo "RUNNER_HOME=$homedir" >> .env
      echo "RUNNER_GRACE_PERIOD=61" >> .env
      echo "RUNNER_INITIAL_GRACE_PERIOD=181" >> .env
      echo "RUNNER_POLL_INTERVAL=11" >> .env
      
      V="/var/run/github-runner"
      mkdir -p $V-jobs
      
      touch $V-last-activity
      
      cat > /etc/systemd/system/runner-termination-check.service << 'EOF'
      [Unit]
      Description=Check GitHub runner termination conditions
      After=network.target
      
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/check-runner-termination.sh
      EOF
      
      cat > /etc/systemd/system/runner-termination-check.timer << EOF
      [Unit]
      Description=Periodic GitHub runner termination check
      Requires=runner-termination-check.service
      
      [Timer]
      OnBootSec=60s
      OnUnitActiveSec=11s
      
      [Install]
      WantedBy=timers.target
      EOF
      
      systemctl daemon-reload
      systemctl enable runner-termination-check.timer
      systemctl start runner-termination-check.timer
      
      INSTANCE_ID=$(get_metadata "instance-id")
      INSTANCE_TYPE=$(get_metadata "instance-type")
      
      RUNNER_NAME="ec2-${INSTANCE_ID}"
      
      METADATA_LABELS=""
      METADATA_LABELS="${METADATA_LABELS},instance-id:${INSTANCE_ID}"
      METADATA_LABELS="${METADATA_LABELS},instance-type:${INSTANCE_TYPE}"
      
      if [ -n "CI" ]; then
        WORKFLOW_LABEL=$(echo "CI" | tr ' /' '-' | tr -cd '[:alnum:]-_')
        METADATA_LABELS="${METADATA_LABELS},workflow:${WORKFLOW_LABEL}"
      fi
      if [ -n "16725250800" ]; then
        METADATA_LABELS="${METADATA_LABELS},run-id:16725250800"
      fi
      if [ -n "1" ]; then
        METADATA_LABELS="${METADATA_LABELS},run-number:1"
      fi
      
      ALL_LABELS="label${METADATA_LABELS}"
      
      log "Configuring runner for repo: omsf-eco-infra/awsinfratesting"
      log "Runner name: ${RUNNER_NAME}"
      log "Labels: ${ALL_LABELS}"
      export RUNNER_TOKEN="test"
      
      if ! ./config.sh --url https://github.com/omsf-eco-infra/awsinfratesting --token test --labels "${ALL_LABELS}" --name "${RUNNER_NAME}" --disableupdate --unattended; then
        log_error "Failed to register runner '${RUNNER_NAME}'"
        log_error "This usually means a runner with this name already exists"
        log_error "If instance ID is 'unknown', metadata fetching likely failed"
        terminate_instance "Runner registration failed"
      fi
      log "Runner registered successfully"
      
      log "Creating registration marker"
      touch /var/run/github-runner-registered
      ls -la /var/run/github-runner-registered
      if [ -f /var/run/github-runner-watchdog.pid ]; then
        WATCHDOG_PID=$(cat /var/run/github-runner-watchdog.pid)
        if kill -0 $WATCHDOG_PID 2>/dev/null; then
          kill $WATCHDOG_PID 2>/dev/null || true
          log "Killed registration watchdog (PID: $WATCHDOG_PID)"
        else
          log "Watchdog process $WATCHDOG_PID already terminated"
        fi
        rm -f /var/run/github-runner-watchdog.pid
      fi
      
      log "Starting runner"
      touch /var/run/github-runner-started
      
      chmod o+x $homedir
      log "Made $homedir traversable for CloudWatch agent"
      mkdir -p $homedir/_diag
      chmod 755 $homedir/_diag
      ./run.sh
  
    ''',
  })
# ---
# name: test_build_aws_params_with_idx
  dict({
    'IamInstanceProfile': dict({
      'Name': 'test',
    }),
    'ImageId': 'ami-0772db4c976d21e9b',
    'InstanceInitiatedShutdownBehavior': 'terminate',
    'InstanceType': 't2.micro',
    'MaxCount': 1,
    'MinCount': 1,
    'SecurityGroupIds': list([
      'test',
    ]),
    'SubnetId': 'test',
    'TagSpecifications': list([
      dict({
        'ResourceType': 'instance',
        'Tags': list([
          dict({
            'Key': 'Name',
            'Value': 'ec2-gha/test-0#42',
          }),
          dict({
            'Key': 'Repository',
            'Value': 'Open-Athena/ec2-gha',
          }),
          dict({
            'Key': 'Workflow',
            'Value': 'CI',
          }),
          dict({
            'Key': 'URL',
            'Value': 'https://github.com/Open-Athena/ec2-gha/actions/runs/16725250800',
          }),
        ]),
      }),
    ]),
    'UserData': '''
      #!/bin/bash
      set -e
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
      log_error() { log "ERROR: $1" >&2; }
      
      flush_cloudwatch_logs() {
        log "Stopping CloudWatch agent to flush logs"
        if systemctl is-active --quiet amazon-cloudwatch-agent; then
          systemctl stop amazon-cloudwatch-agent 2>/dev/null \
          || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
          || true
        fi
      }
      
      cat > /usr/local/bin/runner-common-functions.sh << 'EOCF'
      #!/bin/bash
      log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
      flush_cloudwatch_logs() {
        log "Stopping CloudWatch agent to flush logs"
        if systemctl is-active --quiet amazon-cloudwatch-agent; then
          systemctl stop amazon-cloudwatch-agent 2>/dev/null \
          || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
          || true
        fi
      }
      EOCF
      
      get_metadata() {
        local path="$1"
        local token=$(curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 300" http://169.254.169.254/latest/api/token 2>/dev/null || true)
        if [ -n "$token" ]; then
          curl -s -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
        else
          curl -s "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
        fi
      }
      
      logger "EC2-GHA: Starting userdata script"
      trap 'logger "EC2-GHA: Script failed at line $LINENO with exit code $?"' ERR
      
      INSTANCE_ID=$(get_metadata "instance-id")
      
      terminate_instance() {
        local reason="$1"
        log "FATAL: $reason"
        log "Terminating instance $INSTANCE_ID due to setup failure"
      
        if [ -f "$homedir/config.sh" ] && [ -n "${RUNNER_TOKEN:-}" ]; then
          cd "$homedir" && ./config.sh remove --token "${RUNNER_TOKEN}" || true
        fi
      
        flush_cloudwatch_logs
        shutdown -h now
        exit 1
      }
      
      trap 'terminate_instance "Setup script failed with error on line $LINENO"' ERR
      
      REGISTRATION_TIMEOUT="300"
      if ! [[ "$REGISTRATION_TIMEOUT" =~ ^[0-9]+$ ]]; then
        logger "EC2-GHA: Invalid timeout '$REGISTRATION_TIMEOUT', using default 300"
        REGISTRATION_TIMEOUT=300
      fi
      logger "EC2-GHA: Registration timeout set to $REGISTRATION_TIMEOUT seconds"
      (
        log "Watchdog: Starting $REGISTRATION_TIMEOUT second timeout"
        sleep $REGISTRATION_TIMEOUT
        if [ ! -f /var/run/github-runner-registered ]; then
          log "Watchdog: Registration marker not found after timeout"
          terminate_instance "Runner failed to register within $REGISTRATION_TIMEOUT seconds"
        else
          log "Watchdog: Registration marker found, exiting normally"
        fi
      ) &
      REGISTRATION_WATCHDOG_PID=$!
      log "Watchdog PID: $REGISTRATION_WATCHDOG_PID"
      echo $REGISTRATION_WATCHDOG_PID > /var/run/github-runner-watchdog.pid
      
      
      
      homedir="/home/ec2-user"
      
      if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
        for user in ubuntu ec2-user centos admin debian fedora alpine arch; do
          if id "$user" &>/dev/null; then
            homedir="/home/$user"
            log "Auto-detected: $homedir"
            break
          fi
        done
      
        if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
          homedir=$(getent passwd | awk -F: '$3 >= 1000 && $3 < 65534 && $6 ~ /^\/home\// {print $6}' | while read dir; do
            if [ -d "$dir" ]; then
              echo "$dir"
              break
            fi
          done)
      
          if [ -z "$homedir" ]; then
            homedir="/home/ec2-user"  # Ultimate fallback
            log "Using fallback: $homedir"
          else
            owner=$(stat -c "%U" "$homedir" 2>/dev/null || stat -f "%Su" "$homedir" 2>/dev/null)
            log "Detected: $homedir ($owner)"
          fi
        fi
      else
        log "Using: $homedir"
      fi
      
      INSTANCE_TYPE=$(get_metadata "instance-type")
      INSTANCE_ID=$(get_metadata "instance-id")
      REGION=$(get_metadata "placement/region")
      AZ=$(get_metadata "placement/availability-zone")
      
      exec >> /var/log/runner-setup.log 2>&1
      log "Starting runner setup"
      
      log "Instance metadata: Type=${INSTANCE_TYPE} ID=${INSTANCE_ID} Region=${REGION} AZ=${AZ}"
      
      MAX_LIFETIME_MINUTES=360
      log "Setting up maximum lifetime timeout: ${MAX_LIFETIME_MINUTES} minutes"
      nohup bash -c "sleep ${MAX_LIFETIME_MINUTES}m && echo '[$(date)] Maximum lifetime reached' && shutdown -h now" > /var/log/max-lifetime.log 2>&1 &
      
      if [ "" != "" ]; then
        log "Installing CloudWatch agent"
        (
      
          log "Waiting for dpkg lock to be released..."
          timeout=120
          while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
            if [ $timeout -le 0 ]; then
              log "WARNING: dpkg lock timeout, proceeding anyway"
              break
            fi
            log "dpkg is locked, waiting... ($timeout seconds remaining)"
            sleep 5
            timeout=$((timeout - 5))
          done
      
          wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i -E ./amazon-cloudwatch-agent.deb
          rm amazon-cloudwatch-agent.deb
      
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
      {
        "agent": {
          "run_as_user": "cwagent"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                { "file_path": "/var/log/runner-setup.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-setup", "timezone": "UTC" },
                { "file_path": "/tmp/job-started-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-started", "timezone": "UTC" },
                { "file_path": "/tmp/job-completed-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-completed", "timezone": "UTC" },
                { "file_path": "/tmp/termination-check.log", "log_group_name": "", "log_stream_name": "{instance_id}/termination", "timezone": "UTC" },
                { "file_path": "/home/ec2-user/_diag/Runner_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-diag", "timezone": "UTC" },
                { "file_path": "/home/ec2-user/_diag/Worker_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/worker-diag", "timezone": "UTC" }
              ]
            }
          }
        }
      }
      EOF
      
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
            -s
      
          log "CloudWatch agent started"
        ) || log "WARNING: CloudWatch agent installation failed, continuing without it"
      fi
      
      if [ -n "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" ]; then
        log "Configuring SSH access"
      
        DEFAULT_USER=$(stat -c "%U" "$homedir" 2>/dev/null || echo "root")
      
        mkdir -p "/home/ec2-user/.ssh"
        chmod 700 "/home/ec2-user/.ssh"
      
        echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" >> "$homedir/.ssh/authorized_keys"
        chmod 600 "$homedir/.ssh/authorized_keys"
      
        if [ "$DEFAULT_USER" != "root" ]; then
          chown -R "$DEFAULT_USER:$DEFAULT_USER" "$homedir/.ssh"
        fi
      
        log "SSH key added for user $DEFAULT_USER"
      fi
      
      log "Working directory: $homedir"
      cd "$homedir"
      
      echo "echo 'Hello, World!'" > pre-runner-script.sh
      log "Running pre-runner script"
      source pre-runner-script.sh
      export RUNNER_ALLOW_RUNASROOT=1
      ARCH=$(uname -m)
      if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
        RUNNER_URL=$(echo "test.tar.gz" | sed 's/x64/arm64/g')
        log "ARM detected, using: $RUNNER_URL"
      else
        RUNNER_URL="test.tar.gz"
        log "x64 detected, using: $RUNNER_URL"
      fi
      curl -L $RUNNER_URL -o runner.tar.gz
      log "Extracting runner"
      tar --no-overwrite-dir -xzf runner.tar.gz
      cat > /usr/local/bin/job-started-hook.sh << 'EOFS'
      #!/bin/bash
      exec >> /tmp/job-started-hook.log 2>&1
      V="/var/run/github-runner"
      echo "[$(date)] Job started: ${GITHUB_JOB}"
      mkdir -p $V-jobs
      echo '{"status":"running"}' > $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
      touch $V-last-activity $V-has-run-job
      EOFS
      
      cat > /usr/local/bin/job-completed-hook.sh << 'EOFC'
      #!/bin/bash
      exec >> /tmp/job-completed-hook.log 2>&1
      V="/var/run/github-runner"
      echo "[$(date)] Job completed: ${GITHUB_JOB}"
      rm -f $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
      touch $V-last-activity
      EOFC
      
      cat > /usr/local/bin/check-runner-termination.sh << EOFT
      #!/bin/bash
      exec >> /tmp/termination-check.log 2>&1
      source /usr/local/bin/runner-common-functions.sh
      V="/var/run/github-runner"
      A="\$V-last-activity"
      J="\$V-jobs"
      H="\$V-has-run-job"
      D="$homedir"
      T="test"
      
      [ ! -f "\$A" ] && touch "\$A"
      L=\$(stat -c %Y "\$A" 2>/dev/null || echo 0)
      N=\$(date +%s)
      I=\$((N-L))
      [ -f "\$H" ] && G=\${RUNNER_GRACE_PERIOD:-60} || G=\${RUNNER_INITIAL_GRACE_PERIOD:-180}
      R=\$(grep -l '"status":"running"' \$J/*.job 2>/dev/null | wc -l || echo 0)
      
      if [ \$R -eq 0 ] && [ \$I -gt \$G ]; then
        log "TERMINATING: idle \$I > grace \$G"
        if [ -f "\$D/config.sh" ]; then
          cd "\$D" && pkill -INT -f "Runner.Listener" 2>/dev/null || true
          sleep 2
          log "Deregistering runner..."
          RUNNER_ALLOW_RUNASROOT=1 ./config.sh remove --token \$T 2>&1
          log "Deregistration exit: \$?"
        else
          log "ERROR: config.sh not found at \$D"
        fi
        flush_cloudwatch_logs
        log "Shutting down"
        sudo shutdown -h now
      else
        [ \$R -gt 0 ] && log "\$R job(s) running" || log "Idle \$I/\$G sec"
      fi
      EOFT
      
      chmod +x /usr/local/bin/runner-common-functions.sh /usr/local/bin/job-started-hook.sh /usr/local/bin/job-completed-hook.sh /usr/local/bin/check-runner-termination.sh
      
      echo "ACTIONS_RUNNER_HOOK_JOB_STARTED=/usr/local/bin/job-started-hook.sh" > .env
      echo "ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/usr/local/bin/job-completed-hook.sh" >> .env
      echo "RUNNER_HOME=$homedir" >> .env
      echo "RUNNER_GRACE_PERIOD=61" >> .env
      echo "RUNNER_INITIAL_GRACE_PERIOD=181" >> .env
      echo "RUNNER_POLL_INTERVAL=11" >> .env
      
      V="/var/run/github-runner"
      mkdir -p $V-jobs
      
      touch $V-last-activity
      
      cat > /etc/systemd/system/runner-termination-check.service << 'EOF'
      [Unit]
      Description=Check GitHub runner termination conditions
      After=network.target
      
      [Service]
      Type=oneshot
      ExecStart=/usr/local/bin/check-runner-termination.sh
      EOF
      
      cat > /etc/systemd/system/runner-termination-check.timer << EOF
      [Unit]
      Description=Periodic GitHub runner termination check
      Requires=runner-termination-check.service
      
      [Timer]
      OnBootSec=60s
      OnUnitActiveSec=11s
      
      [Install]
      WantedBy=timers.target
      EOF
      
      systemctl daemon-reload
      systemctl enable runner-termination-check.timer
      systemctl start runner-termination-check.timer
      
      INSTANCE_ID=$(get_metadata "instance-id")
      INSTANCE_TYPE=$(get_metadata "instance-type")
      
      RUNNER_NAME="ec2-${INSTANCE_ID}"
      
      METADATA_LABELS=""
      METADATA_LABELS="${METADATA_LABELS},instance-id:${INSTANCE_ID}"
      METADATA_LABELS="${METADATA_LABELS},instance-type:${INSTANCE_TYPE}"
      
      if [ -n "CI" ]; then
        WORKFLOW_LABEL=$(echo "CI" | tr ' /' '-' | tr -cd '[:alnum:]-_')
        METADATA_LABELS="${METADATA_LABELS},workflow:${WORKFLOW_LABEL}"
      fi
      if [ -n "16725250800" ]; then
        METADATA_LABELS="${METADATA_LABELS},run-id:16725250800"
      fi
      if [ -n "42" ]; then
        METADATA_LABELS="${METADATA_LABELS},run-number:42"
      fi
      
      ALL_LABELS="label${METADATA_LABELS}"
      
      log "Configuring runner for repo: omsf-eco-infra/awsinfratesting"
      log "Runner name: ${RUNNER_NAME}"
      log "Labels: ${ALL_LABELS}"
      export RUNNER_TOKEN="test"
      
      if ! ./config.sh --url https://github.com/omsf-eco-infra/awsinfratesting --token test --labels "${ALL_LABELS}" --name "${RUNNER_NAME}" --disableupdate --unattended; then
        log_error "Failed to register runner '${RUNNER_NAME}'"
        log_error "This usually means a runner with this name already exists"
        log_error "If instance ID is 'unknown', metadata fetching likely failed"
        terminate_instance "Runner registration failed"
      fi
      log "Runner registered successfully"
      
      log "Creating registration marker"
      touch /var/run/github-runner-registered
      ls -la /var/run/github-runner-registered
      if [ -f /var/run/github-runner-watchdog.pid ]; then
        WATCHDOG_PID=$(cat /var/run/github-runner-watchdog.pid)
        if kill -0 $WATCHDOG_PID 2>/dev/null; then
          kill $WATCHDOG_PID 2>/dev/null || true
          log "Killed registration watchdog (PID: $WATCHDOG_PID)"
        else
          log "Watchdog process $WATCHDOG_PID already terminated"
        fi
        rm -f /var/run/github-runner-watchdog.pid
      fi
      
      log "Starting runner"
      touch /var/run/github-runner-started
      
      chmod o+x $homedir
      log "Made $homedir traversable for CloudWatch agent"
      mkdir -p $homedir/_diag
      chmod 755 $homedir/_diag
      ./run.sh
  
    ''',
  })
# ---
# name: test_build_user_data
  '''
  #!/bin/bash
  set -e
  log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
  log_error() { log "ERROR: $1" >&2; }
  
  flush_cloudwatch_logs() {
    log "Stopping CloudWatch agent to flush logs"
    if systemctl is-active --quiet amazon-cloudwatch-agent; then
      systemctl stop amazon-cloudwatch-agent 2>/dev/null \
      || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
      || true
    fi
  }
  
  cat > /usr/local/bin/runner-common-functions.sh << 'EOCF'
  #!/bin/bash
  log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
  flush_cloudwatch_logs() {
    log "Stopping CloudWatch agent to flush logs"
    if systemctl is-active --quiet amazon-cloudwatch-agent; then
      systemctl stop amazon-cloudwatch-agent 2>/dev/null \
      || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
      || true
    fi
  }
  EOCF
  
  get_metadata() {
    local path="$1"
    local token=$(curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 300" http://169.254.169.254/latest/api/token 2>/dev/null || true)
    if [ -n "$token" ]; then
      curl -s -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
    else
      curl -s "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
    fi
  }
  
  logger "EC2-GHA: Starting userdata script"
  trap 'logger "EC2-GHA: Script failed at line $LINENO with exit code $?"' ERR
  
  INSTANCE_ID=$(get_metadata "instance-id")
  
  terminate_instance() {
    local reason="$1"
    log "FATAL: $reason"
    log "Terminating instance $INSTANCE_ID due to setup failure"
  
    if [ -f "$homedir/config.sh" ] && [ -n "${RUNNER_TOKEN:-}" ]; then
      cd "$homedir" && ./config.sh remove --token "${RUNNER_TOKEN}" || true
    fi
  
    flush_cloudwatch_logs
    shutdown -h now
    exit 1
  }
  
  trap 'terminate_instance "Setup script failed with error on line $LINENO"' ERR
  
  REGISTRATION_TIMEOUT="300"
  if ! [[ "$REGISTRATION_TIMEOUT" =~ ^[0-9]+$ ]]; then
    logger "EC2-GHA: Invalid timeout '$REGISTRATION_TIMEOUT', using default 300"
    REGISTRATION_TIMEOUT=300
  fi
  logger "EC2-GHA: Registration timeout set to $REGISTRATION_TIMEOUT seconds"
  (
    log "Watchdog: Starting $REGISTRATION_TIMEOUT second timeout"
    sleep $REGISTRATION_TIMEOUT
    if [ ! -f /var/run/github-runner-registered ]; then
      log "Watchdog: Registration marker not found after timeout"
      terminate_instance "Runner failed to register within $REGISTRATION_TIMEOUT seconds"
    else
      log "Watchdog: Registration marker found, exiting normally"
    fi
  ) &
  REGISTRATION_WATCHDOG_PID=$!
  log "Watchdog PID: $REGISTRATION_WATCHDOG_PID"
  echo $REGISTRATION_WATCHDOG_PID > /var/run/github-runner-watchdog.pid
  
  
  
  homedir="/home/ec2-user"
  
  if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
    for user in ubuntu ec2-user centos admin debian fedora alpine arch; do
      if id "$user" &>/dev/null; then
        homedir="/home/$user"
        log "Auto-detected: $homedir"
        break
      fi
    done
  
    if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
      homedir=$(getent passwd | awk -F: '$3 >= 1000 && $3 < 65534 && $6 ~ /^\/home\// {print $6}' | while read dir; do
        if [ -d "$dir" ]; then
          echo "$dir"
          break
        fi
      done)
  
      if [ -z "$homedir" ]; then
        homedir="/home/ec2-user"  # Ultimate fallback
        log "Using fallback: $homedir"
      else
        owner=$(stat -c "%U" "$homedir" 2>/dev/null || stat -f "%Su" "$homedir" 2>/dev/null)
        log "Detected: $homedir ($owner)"
      fi
    fi
  else
    log "Using: $homedir"
  fi
  
  INSTANCE_TYPE=$(get_metadata "instance-type")
  INSTANCE_ID=$(get_metadata "instance-id")
  REGION=$(get_metadata "placement/region")
  AZ=$(get_metadata "placement/availability-zone")
  
  exec >> /var/log/runner-setup.log 2>&1
  log "Starting runner setup"
  
  log "Instance metadata: Type=${INSTANCE_TYPE} ID=${INSTANCE_ID} Region=${REGION} AZ=${AZ}"
  
  MAX_LIFETIME_MINUTES=360
  log "Setting up maximum lifetime timeout: ${MAX_LIFETIME_MINUTES} minutes"
  nohup bash -c "sleep ${MAX_LIFETIME_MINUTES}m && echo '[$(date)] Maximum lifetime reached' && shutdown -h now" > /var/log/max-lifetime.log 2>&1 &
  
  if [ "" != "" ]; then
    log "Installing CloudWatch agent"
    (
  
      log "Waiting for dpkg lock to be released..."
      timeout=120
      while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
          log "WARNING: dpkg lock timeout, proceeding anyway"
          break
        fi
        log "dpkg is locked, waiting... ($timeout seconds remaining)"
        sleep 5
        timeout=$((timeout - 5))
      done
  
      wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
      dpkg -i -E ./amazon-cloudwatch-agent.deb
      rm amazon-cloudwatch-agent.deb
  
      cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
  {
    "agent": {
      "run_as_user": "cwagent"
    },
    "logs": {
      "logs_collected": {
        "files": {
          "collect_list": [
            { "file_path": "/var/log/runner-setup.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-setup", "timezone": "UTC" },
            { "file_path": "/tmp/job-started-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-started", "timezone": "UTC" },
            { "file_path": "/tmp/job-completed-hook.log", "log_group_name": "", "log_stream_name": "{instance_id}/job-completed", "timezone": "UTC" },
            { "file_path": "/tmp/termination-check.log", "log_group_name": "", "log_stream_name": "{instance_id}/termination", "timezone": "UTC" },
            { "file_path": "/home/ec2-user/_diag/Runner_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/runner-diag", "timezone": "UTC" },
            { "file_path": "/home/ec2-user/_diag/Worker_**.log", "log_group_name": "", "log_stream_name": "{instance_id}/worker-diag", "timezone": "UTC" }
          ]
        }
      }
    }
  }
  EOF
  
      /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
        -a fetch-config \
        -m ec2 \
        -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
        -s
  
      log "CloudWatch agent started"
    ) || log "WARNING: CloudWatch agent installation failed, continuing without it"
  fi
  
  if [ -n "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" ]; then
    log "Configuring SSH access"
  
    DEFAULT_USER=$(stat -c "%U" "$homedir" 2>/dev/null || echo "root")
  
    mkdir -p "/home/ec2-user/.ssh"
    chmod 700 "/home/ec2-user/.ssh"
  
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host" >> "$homedir/.ssh/authorized_keys"
    chmod 600 "$homedir/.ssh/authorized_keys"
  
    if [ "$DEFAULT_USER" != "root" ]; then
      chown -R "$DEFAULT_USER:$DEFAULT_USER" "$homedir/.ssh"
    fi
  
    log "SSH key added for user $DEFAULT_USER"
  fi
  
  log "Working directory: $homedir"
  cd "$homedir"
  
  echo "echo 'Hello, World!'" > pre-runner-script.sh
  log "Running pre-runner script"
  source pre-runner-script.sh
  export RUNNER_ALLOW_RUNASROOT=1
  ARCH=$(uname -m)
  if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
    RUNNER_URL=$(echo "test.tar.gz" | sed 's/x64/arm64/g')
    log "ARM detected, using: $RUNNER_URL"
  else
    RUNNER_URL="test.tar.gz"
    log "x64 detected, using: $RUNNER_URL"
  fi
  curl -L $RUNNER_URL -o runner.tar.gz
  log "Extracting runner"
  tar --no-overwrite-dir -xzf runner.tar.gz
  cat > /usr/local/bin/job-started-hook.sh << 'EOFS'
  #!/bin/bash
  exec >> /tmp/job-started-hook.log 2>&1
  V="/var/run/github-runner"
  echo "[$(date)] Job started: ${GITHUB_JOB}"
  mkdir -p $V-jobs
  echo '{"status":"running"}' > $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
  touch $V-last-activity $V-has-run-job
  EOFS
  
  cat > /usr/local/bin/job-completed-hook.sh << 'EOFC'
  #!/bin/bash
  exec >> /tmp/job-completed-hook.log 2>&1
  V="/var/run/github-runner"
  echo "[$(date)] Job completed: ${GITHUB_JOB}"
  rm -f $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
  touch $V-last-activity
  EOFC
  
  cat > /usr/local/bin/check-runner-termination.sh << EOFT
  #!/bin/bash
  exec >> /tmp/termination-check.log 2>&1
  source /usr/local/bin/runner-common-functions.sh
  V="/var/run/github-runner"
  A="\$V-last-activity"
  J="\$V-jobs"
  H="\$V-has-run-job"
  D="$homedir"
  T="test"
  
  [ ! -f "\$A" ] && touch "\$A"
  L=\$(stat -c %Y "\$A" 2>/dev/null || echo 0)
  N=\$(date +%s)
  I=\$((N-L))
  [ -f "\$H" ] && G=\${RUNNER_GRACE_PERIOD:-60} || G=\${RUNNER_INITIAL_GRACE_PERIOD:-180}
  R=\$(grep -l '"status":"running"' \$J/*.job 2>/dev/null | wc -l || echo 0)
  
  if [ \$R -eq 0 ] && [ \$I -gt \$G ]; then
    log "TERMINATING: idle \$I > grace \$G"
    if [ -f "\$D/config.sh" ]; then
      cd "\$D" && pkill -INT -f "Runner.Listener" 2>/dev/null || true
      sleep 2
      log "Deregistering runner..."
      RUNNER_ALLOW_RUNASROOT=1 ./config.sh remove --token \$T 2>&1
      log "Deregistration exit: \$?"
    else
      log "ERROR: config.sh not found at \$D"
    fi
    flush_cloudwatch_logs
    log "Shutting down"
    sudo shutdown -h now
  else
    [ \$R -gt 0 ] && log "\$R job(s) running" || log "Idle \$I/\$G sec"
  fi
  EOFT
  
  chmod +x /usr/local/bin/runner-common-functions.sh /usr/local/bin/job-started-hook.sh /usr/local/bin/job-completed-hook.sh /usr/local/bin/check-runner-termination.sh
  
  echo "ACTIONS_RUNNER_HOOK_JOB_STARTED=/usr/local/bin/job-started-hook.sh" > .env
  echo "ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/usr/local/bin/job-completed-hook.sh" >> .env
  echo "RUNNER_HOME=$homedir" >> .env
  echo "RUNNER_GRACE_PERIOD=61" >> .env
  echo "RUNNER_INITIAL_GRACE_PERIOD=181" >> .env
  echo "RUNNER_POLL_INTERVAL=11" >> .env
  
  V="/var/run/github-runner"
  mkdir -p $V-jobs
  
  touch $V-last-activity
  
  cat > /etc/systemd/system/runner-termination-check.service << 'EOF'
  [Unit]
  Description=Check GitHub runner termination conditions
  After=network.target
  
  [Service]
  Type=oneshot
  ExecStart=/usr/local/bin/check-runner-termination.sh
  EOF
  
  cat > /etc/systemd/system/runner-termination-check.timer << EOF
  [Unit]
  Description=Periodic GitHub runner termination check
  Requires=runner-termination-check.service
  
  [Timer]
  OnBootSec=60s
  OnUnitActiveSec=11s
  
  [Install]
  WantedBy=timers.target
  EOF
  
  systemctl daemon-reload
  systemctl enable runner-termination-check.timer
  systemctl start runner-termination-check.timer
  
  INSTANCE_ID=$(get_metadata "instance-id")
  INSTANCE_TYPE=$(get_metadata "instance-type")
  
  RUNNER_NAME="ec2-${INSTANCE_ID}"
  
  METADATA_LABELS=""
  METADATA_LABELS="${METADATA_LABELS},instance-id:${INSTANCE_ID}"
  METADATA_LABELS="${METADATA_LABELS},instance-type:${INSTANCE_TYPE}"
  
  if [ -n "CI" ]; then
    WORKFLOW_LABEL=$(echo "CI" | tr ' /' '-' | tr -cd '[:alnum:]-_')
    METADATA_LABELS="${METADATA_LABELS},workflow:${WORKFLOW_LABEL}"
  fi
  if [ -n "16725250800" ]; then
    METADATA_LABELS="${METADATA_LABELS},run-id:16725250800"
  fi
  if [ -n "42" ]; then
    METADATA_LABELS="${METADATA_LABELS},run-number:42"
  fi
  
  ALL_LABELS="label${METADATA_LABELS}"
  
  log "Configuring runner for repo: omsf-eco-infra/awsinfratesting"
  log "Runner name: ${RUNNER_NAME}"
  log "Labels: ${ALL_LABELS}"
  export RUNNER_TOKEN="test"
  
  if ! ./config.sh --url https://github.com/omsf-eco-infra/awsinfratesting --token test --labels "${ALL_LABELS}" --name "${RUNNER_NAME}" --disableupdate --unattended; then
    log_error "Failed to register runner '${RUNNER_NAME}'"
    log_error "This usually means a runner with this name already exists"
    log_error "If instance ID is 'unknown', metadata fetching likely failed"
    terminate_instance "Runner registration failed"
  fi
  log "Runner registered successfully"
  
  log "Creating registration marker"
  touch /var/run/github-runner-registered
  ls -la /var/run/github-runner-registered
  if [ -f /var/run/github-runner-watchdog.pid ]; then
    WATCHDOG_PID=$(cat /var/run/github-runner-watchdog.pid)
    if kill -0 $WATCHDOG_PID 2>/dev/null; then
      kill $WATCHDOG_PID 2>/dev/null || true
      log "Killed registration watchdog (PID: $WATCHDOG_PID)"
    else
      log "Watchdog process $WATCHDOG_PID already terminated"
    fi
    rm -f /var/run/github-runner-watchdog.pid
  fi
  
  log "Starting runner"
  touch /var/run/github-runner-started
  
  chmod o+x $homedir
  log "Made $homedir traversable for CloudWatch agent"
  mkdir -p $homedir/_diag
  chmod 755 $homedir/_diag
  ./run.sh
  
  '''
# ---
# name: test_build_user_data_with_cloudwatch
  '''
  #!/bin/bash
  set -e
  log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
  log_error() { log "ERROR: $1" >&2; }
  
  flush_cloudwatch_logs() {
    log "Stopping CloudWatch agent to flush logs"
    if systemctl is-active --quiet amazon-cloudwatch-agent; then
      systemctl stop amazon-cloudwatch-agent 2>/dev/null \
      || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
      || true
    fi
  }
  
  cat > /usr/local/bin/runner-common-functions.sh << 'EOCF'
  #!/bin/bash
  log() { echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/runner-setup.log; }
  flush_cloudwatch_logs() {
    log "Stopping CloudWatch agent to flush logs"
    if systemctl is-active --quiet amazon-cloudwatch-agent; then
      systemctl stop amazon-cloudwatch-agent 2>/dev/null \
      || /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop -m ec2 2>/dev/null \
      || true
    fi
  }
  EOCF
  
  get_metadata() {
    local path="$1"
    local token=$(curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 300" http://169.254.169.254/latest/api/token 2>/dev/null || true)
    if [ -n "$token" ]; then
      curl -s -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
    else
      curl -s "http://169.254.169.254/latest/meta-data/$path" 2>/dev/null || echo "unknown"
    fi
  }
  
  logger "EC2-GHA: Starting userdata script"
  trap 'logger "EC2-GHA: Script failed at line $LINENO with exit code $?"' ERR
  
  INSTANCE_ID=$(get_metadata "instance-id")
  
  terminate_instance() {
    local reason="$1"
    log "FATAL: $reason"
    log "Terminating instance $INSTANCE_ID due to setup failure"
  
    if [ -f "$homedir/config.sh" ] && [ -n "${RUNNER_TOKEN:-}" ]; then
      cd "$homedir" && ./config.sh remove --token "${RUNNER_TOKEN}" || true
    fi
  
    flush_cloudwatch_logs
    shutdown -h now
    exit 1
  }
  
  trap 'terminate_instance "Setup script failed with error on line $LINENO"' ERR
  
  REGISTRATION_TIMEOUT="300"
  if ! [[ "$REGISTRATION_TIMEOUT" =~ ^[0-9]+$ ]]; then
    logger "EC2-GHA: Invalid timeout '$REGISTRATION_TIMEOUT', using default 300"
    REGISTRATION_TIMEOUT=300
  fi
  logger "EC2-GHA: Registration timeout set to $REGISTRATION_TIMEOUT seconds"
  (
    log "Watchdog: Starting $REGISTRATION_TIMEOUT second timeout"
    sleep $REGISTRATION_TIMEOUT
    if [ ! -f /var/run/github-runner-registered ]; then
      log "Watchdog: Registration marker not found after timeout"
      terminate_instance "Runner failed to register within $REGISTRATION_TIMEOUT seconds"
    else
      log "Watchdog: Registration marker found, exiting normally"
    fi
  ) &
  REGISTRATION_WATCHDOG_PID=$!
  log "Watchdog PID: $REGISTRATION_WATCHDOG_PID"
  echo $REGISTRATION_WATCHDOG_PID > /var/run/github-runner-watchdog.pid
  
  
  
  homedir="/home/ec2-user"
  
  if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
    for user in ubuntu ec2-user centos admin debian fedora alpine arch; do
      if id "$user" &>/dev/null; then
        homedir="/home/$user"
        log "Auto-detected: $homedir"
        break
      fi
    done
  
    if [ -z "$homedir" ] || [ "$homedir" = "AUTO" ]; then
      homedir=$(getent passwd | awk -F: '$3 >= 1000 && $3 < 65534 && $6 ~ /^\/home\// {print $6}' | while read dir; do
        if [ -d "$dir" ]; then
          echo "$dir"
          break
        fi
      done)
  
      if [ -z "$homedir" ]; then
        homedir="/home/ec2-user"  # Ultimate fallback
        log "Using fallback: $homedir"
      else
        owner=$(stat -c "%U" "$homedir" 2>/dev/null || stat -f "%Su" "$homedir" 2>/dev/null)
        log "Detected: $homedir ($owner)"
      fi
    fi
  else
    log "Using: $homedir"
  fi
  
  INSTANCE_TYPE=$(get_metadata "instance-type")
  INSTANCE_ID=$(get_metadata "instance-id")
  REGION=$(get_metadata "placement/region")
  AZ=$(get_metadata "placement/availability-zone")
  
  exec >> /var/log/runner-setup.log 2>&1
  log "Starting runner setup"
  
  log "Instance metadata: Type=${INSTANCE_TYPE} ID=${INSTANCE_ID} Region=${REGION} AZ=${AZ}"
  
  MAX_LIFETIME_MINUTES=360
  log "Setting up maximum lifetime timeout: ${MAX_LIFETIME_MINUTES} minutes"
  nohup bash -c "sleep ${MAX_LIFETIME_MINUTES}m && echo '[$(date)] Maximum lifetime reached' && shutdown -h now" > /var/log/max-lifetime.log 2>&1 &
  
  if [ "/aws/ec2/github-runners" != "" ]; then
    log "Installing CloudWatch agent"
    (
  
      log "Waiting for dpkg lock to be released..."
      timeout=120
      while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || fuser /var/lib/dpkg/lock >/dev/null 2>&1; do
        if [ $timeout -le 0 ]; then
          log "WARNING: dpkg lock timeout, proceeding anyway"
          break
        fi
        log "dpkg is locked, waiting... ($timeout seconds remaining)"
        sleep 5
        timeout=$((timeout - 5))
      done
  
      wget -q https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
      dpkg -i -E ./amazon-cloudwatch-agent.deb
      rm amazon-cloudwatch-agent.deb
  
      cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOF
  {
    "agent": {
      "run_as_user": "cwagent"
    },
    "logs": {
      "logs_collected": {
        "files": {
          "collect_list": [
            { "file_path": "/var/log/runner-setup.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/runner-setup", "timezone": "UTC" },
            { "file_path": "/tmp/job-started-hook.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/job-started", "timezone": "UTC" },
            { "file_path": "/tmp/job-completed-hook.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/job-completed", "timezone": "UTC" },
            { "file_path": "/tmp/termination-check.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/termination", "timezone": "UTC" },
            { "file_path": "/home/ec2-user/_diag/Runner_**.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/runner-diag", "timezone": "UTC" },
            { "file_path": "/home/ec2-user/_diag/Worker_**.log", "log_group_name": "/aws/ec2/github-runners", "log_stream_name": "{instance_id}/worker-diag", "timezone": "UTC" }
          ]
        }
      }
    }
  }
  EOF
  
      /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
        -a fetch-config \
        -m ec2 \
        -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
        -s
  
      log "CloudWatch agent started"
    ) || log "WARNING: CloudWatch agent installation failed, continuing without it"
  fi
  
  if [ -n "" ]; then
    log "Configuring SSH access"
  
    DEFAULT_USER=$(stat -c "%U" "$homedir" 2>/dev/null || echo "root")
  
    mkdir -p "/home/ec2-user/.ssh"
    chmod 700 "/home/ec2-user/.ssh"
  
    echo "" >> "$homedir/.ssh/authorized_keys"
    chmod 600 "$homedir/.ssh/authorized_keys"
  
    if [ "$DEFAULT_USER" != "root" ]; then
      chown -R "$DEFAULT_USER:$DEFAULT_USER" "$homedir/.ssh"
    fi
  
    log "SSH key added for user $DEFAULT_USER"
  fi
  
  log "Working directory: $homedir"
  cd "$homedir"
  
  echo "echo 'Hello, World!'" > pre-runner-script.sh
  log "Running pre-runner script"
  source pre-runner-script.sh
  export RUNNER_ALLOW_RUNASROOT=1
  ARCH=$(uname -m)
  if [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
    RUNNER_URL=$(echo "test.tar.gz" | sed 's/x64/arm64/g')
    log "ARM detected, using: $RUNNER_URL"
  else
    RUNNER_URL="test.tar.gz"
    log "x64 detected, using: $RUNNER_URL"
  fi
  curl -L $RUNNER_URL -o runner.tar.gz
  log "Extracting runner"
  tar --no-overwrite-dir -xzf runner.tar.gz
  cat > /usr/local/bin/job-started-hook.sh << 'EOFS'
  #!/bin/bash
  exec >> /tmp/job-started-hook.log 2>&1
  V="/var/run/github-runner"
  echo "[$(date)] Job started: ${GITHUB_JOB}"
  mkdir -p $V-jobs
  echo '{"status":"running"}' > $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
  touch $V-last-activity $V-has-run-job
  EOFS
  
  cat > /usr/local/bin/job-completed-hook.sh << 'EOFC'
  #!/bin/bash
  exec >> /tmp/job-completed-hook.log 2>&1
  V="/var/run/github-runner"
  echo "[$(date)] Job completed: ${GITHUB_JOB}"
  rm -f $V-jobs/${GITHUB_RUN_ID}-${GITHUB_JOB}.job
  touch $V-last-activity
  EOFC
  
  cat > /usr/local/bin/check-runner-termination.sh << EOFT
  #!/bin/bash
  exec >> /tmp/termination-check.log 2>&1
  source /usr/local/bin/runner-common-functions.sh
  V="/var/run/github-runner"
  A="\$V-last-activity"
  J="\$V-jobs"
  H="\$V-has-run-job"
  D="$homedir"
  T="test"
  
  [ ! -f "\$A" ] && touch "\$A"
  L=\$(stat -c %Y "\$A" 2>/dev/null || echo 0)
  N=\$(date +%s)
  I=\$((N-L))
  [ -f "\$H" ] && G=\${RUNNER_GRACE_PERIOD:-60} || G=\${RUNNER_INITIAL_GRACE_PERIOD:-180}
  R=\$(grep -l '"status":"running"' \$J/*.job 2>/dev/null | wc -l || echo 0)
  
  if [ \$R -eq 0 ] && [ \$I -gt \$G ]; then
    log "TERMINATING: idle \$I > grace \$G"
    if [ -f "\$D/config.sh" ]; then
      cd "\$D" && pkill -INT -f "Runner.Listener" 2>/dev/null || true
      sleep 2
      log "Deregistering runner..."
      RUNNER_ALLOW_RUNASROOT=1 ./config.sh remove --token \$T 2>&1
      log "Deregistration exit: \$?"
    else
      log "ERROR: config.sh not found at \$D"
    fi
    flush_cloudwatch_logs
    log "Shutting down"
    sudo shutdown -h now
  else
    [ \$R -gt 0 ] && log "\$R job(s) running" || log "Idle \$I/\$G sec"
  fi
  EOFT
  
  chmod +x /usr/local/bin/runner-common-functions.sh /usr/local/bin/job-started-hook.sh /usr/local/bin/job-completed-hook.sh /usr/local/bin/check-runner-termination.sh
  
  echo "ACTIONS_RUNNER_HOOK_JOB_STARTED=/usr/local/bin/job-started-hook.sh" > .env
  echo "ACTIONS_RUNNER_HOOK_JOB_COMPLETED=/usr/local/bin/job-completed-hook.sh" >> .env
  echo "RUNNER_HOME=$homedir" >> .env
  echo "RUNNER_GRACE_PERIOD=61" >> .env
  echo "RUNNER_INITIAL_GRACE_PERIOD=181" >> .env
  echo "RUNNER_POLL_INTERVAL=11" >> .env
  
  V="/var/run/github-runner"
  mkdir -p $V-jobs
  
  touch $V-last-activity
  
  cat > /etc/systemd/system/runner-termination-check.service << 'EOF'
  [Unit]
  Description=Check GitHub runner termination conditions
  After=network.target
  
  [Service]
  Type=oneshot
  ExecStart=/usr/local/bin/check-runner-termination.sh
  EOF
  
  cat > /etc/systemd/system/runner-termination-check.timer << EOF
  [Unit]
  Description=Periodic GitHub runner termination check
  Requires=runner-termination-check.service
  
  [Timer]
  OnBootSec=60s
  OnUnitActiveSec=11s
  
  [Install]
  WantedBy=timers.target
  EOF
  
  systemctl daemon-reload
  systemctl enable runner-termination-check.timer
  systemctl start runner-termination-check.timer
  
  INSTANCE_ID=$(get_metadata "instance-id")
  INSTANCE_TYPE=$(get_metadata "instance-type")
  
  RUNNER_NAME="ec2-${INSTANCE_ID}"
  
  METADATA_LABELS=""
  METADATA_LABELS="${METADATA_LABELS},instance-id:${INSTANCE_ID}"
  METADATA_LABELS="${METADATA_LABELS},instance-type:${INSTANCE_TYPE}"
  
  if [ -n "CI" ]; then
    WORKFLOW_LABEL=$(echo "CI" | tr ' /' '-' | tr -cd '[:alnum:]-_')
    METADATA_LABELS="${METADATA_LABELS},workflow:${WORKFLOW_LABEL}"
  fi
  if [ -n "16725250800" ]; then
    METADATA_LABELS="${METADATA_LABELS},run-id:16725250800"
  fi
  if [ -n "42" ]; then
    METADATA_LABELS="${METADATA_LABELS},run-number:42"
  fi
  
  ALL_LABELS="label${METADATA_LABELS}"
  
  log "Configuring runner for repo: omsf-eco-infra/awsinfratesting"
  log "Runner name: ${RUNNER_NAME}"
  log "Labels: ${ALL_LABELS}"
  export RUNNER_TOKEN="test"
  
  if ! ./config.sh --url https://github.com/omsf-eco-infra/awsinfratesting --token test --labels "${ALL_LABELS}" --name "${RUNNER_NAME}" --disableupdate --unattended; then
    log_error "Failed to register runner '${RUNNER_NAME}'"
    log_error "This usually means a runner with this name already exists"
    log_error "If instance ID is 'unknown', metadata fetching likely failed"
    terminate_instance "Runner registration failed"
  fi
  log "Runner registered successfully"
  
  log "Creating registration marker"
  touch /var/run/github-runner-registered
  ls -la /var/run/github-runner-registered
  if [ -f /var/run/github-runner-watchdog.pid ]; then
    WATCHDOG_PID=$(cat /var/run/github-runner-watchdog.pid)
    if kill -0 $WATCHDOG_PID 2>/dev/null; then
      kill $WATCHDOG_PID 2>/dev/null || true
      log "Killed registration watchdog (PID: $WATCHDOG_PID)"
    else
      log "Watchdog process $WATCHDOG_PID already terminated"
    fi
    rm -f /var/run/github-runner-watchdog.pid
  fi
  
  log "Starting runner"
  touch /var/run/github-runner-started
  
  chmod o+x $homedir
  log "Made $homedir traversable for CloudWatch agent"
  mkdir -p $homedir/_diag
  chmod 755 $homedir/_diag
  ./run.sh
  
  '''
# ---
