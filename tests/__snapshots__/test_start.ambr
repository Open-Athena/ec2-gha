# serializer version: 1
# name: test_build_aws_params
  dict({
    'IamInstanceProfile': dict({
      'Name': 'test',
    }),
    'ImageId': 'ami-0772db4c976d21e9b',
    'InstanceInitiatedShutdownBehavior': 'terminate',
    'InstanceType': 't2.micro',
    'MaxCount': 1,
    'MinCount': 1,
    'SecurityGroupIds': list([
      'test',
    ]),
    'SubnetId': 'test',
    'TagSpecifications': list([
      dict({
        'ResourceType': 'instance',
        'Tags': list([
          dict({
            'Key': 'Name',
            'Value': 'test',
          }),
          dict({
            'Key': 'Owner',
            'Value': 'test',
          }),
          dict({
            'Key': 'Repository',
            'Value': 'Open-Athena/ec2-gha',
          }),
          dict({
            'Key': 'Workflow',
            'Value': 'CI',
          }),
          dict({
            'Key': 'URL',
            'Value': 'https://github.com/Open-Athena/ec2-gha/actions/runs/16725250800',
          }),
        ]),
      }),
    ]),
    'UserData': '''
      #!/bin/bash
      set -e
      
      # Essential variables from template substitution
      export debug=""
      export homedir="/home/ec2-user"
      export repo="omsf-eco-infra/awsinfratesting"
      export runner_tokens="test"
      export runner_labels="label"
      export cloudwatch_logs_group=""
      export runner_grace_period="61"
      export runner_initial_grace_period="181"
      export runner_poll_interval="11"
      export runner_registration_timeout="300"
      export max_instance_lifetime="360"
      export runners_per_instance="1"
      export runner_release="test.tar.gz"
      export ssh_pubkey="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host"
      export instance_name=""
      export action_sha="abc123def456789012345678901234567890abcd"
      
      # Custom userdata from user (if any)
      export userdata=""
      export script="echo 'Hello, World!'"
      
      # Log prefixes
      export log_prefix_job_started="Job started:"
      export log_prefix_job_completed="Job completed:"
      
      # Fetch and execute the main script from GitHub
      # action_sha has already been resolved from action_ref in Python for security and consistency
      SCRIPT_URL="https://raw.githubusercontent.com/Open-Athena/ec2-gha/${action_sha}/src/ec2_gha/scripts/runner-setup.sh"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Fetching main script from: $SCRIPT_URL (SHA: ${action_sha})" | tee -a /var/log/runner-setup.log
      
      # Try to download with retries
      for i in {1..5}; do
        if curl -sSL "$SCRIPT_URL" -o /tmp/runner-setup.sh; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
          break
        elif wget -q "$SCRIPT_URL" -O /tmp/runner-setup.sh; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
          break
        else
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Failed to download script (attempt $i), retrying..." | tee -a /var/log/runner-setup.log
          sleep 2
        fi
      
        if [ $i -eq 5 ]; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Failed to download runner setup script after 5 attempts" | tee -a /var/log/runner-setup.log
          shutdown -h now
          exit 1
        fi
      done
      
      # Verify we got something
      if [ ! -s /tmp/runner-setup.sh ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Downloaded script is empty" | tee -a /var/log/runner-setup.log
        shutdown -h now
        exit 1
      fi
      
      # Make it executable and run it
      chmod +x /tmp/runner-setup.sh
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Executing runner setup script" | tee -a /var/log/runner-setup.log
      exec /tmp/runner-setup.sh
    ''',
  })
# ---
# name: test_build_aws_params_with_idx
  dict({
    'IamInstanceProfile': dict({
      'Name': 'test',
    }),
    'ImageId': 'ami-0772db4c976d21e9b',
    'InstanceInitiatedShutdownBehavior': 'terminate',
    'InstanceType': 't2.micro',
    'MaxCount': 1,
    'MinCount': 1,
    'SecurityGroupIds': list([
      'test',
    ]),
    'SubnetId': 'test',
    'TagSpecifications': list([
      dict({
        'ResourceType': 'instance',
        'Tags': list([
          dict({
            'Key': 'Name',
            'Value': 'ec2-gha/test#42 0',
          }),
          dict({
            'Key': 'Repository',
            'Value': 'Open-Athena/ec2-gha',
          }),
          dict({
            'Key': 'Workflow',
            'Value': 'CI',
          }),
          dict({
            'Key': 'URL',
            'Value': 'https://github.com/Open-Athena/ec2-gha/actions/runs/16725250800',
          }),
        ]),
      }),
    ]),
    'UserData': '''
      #!/bin/bash
      set -e
      
      # Essential variables from template substitution
      export debug=""
      export homedir="/home/ec2-user"
      export repo="omsf-eco-infra/awsinfratesting"
      export runner_tokens="test"
      export runner_labels="label"
      export cloudwatch_logs_group=""
      export runner_grace_period="61"
      export runner_initial_grace_period="181"
      export runner_poll_interval="11"
      export runner_registration_timeout="300"
      export max_instance_lifetime="360"
      export runners_per_instance="1"
      export runner_release="test.tar.gz"
      export ssh_pubkey="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host"
      export instance_name=""
      export action_sha="abc123def456789012345678901234567890abcd"
      
      # Custom userdata from user (if any)
      export userdata=""
      export script="echo 'Hello, World!'"
      
      # Log prefixes
      export log_prefix_job_started="Job started:"
      export log_prefix_job_completed="Job completed:"
      
      # Fetch and execute the main script from GitHub
      # action_sha has already been resolved from action_ref in Python for security and consistency
      SCRIPT_URL="https://raw.githubusercontent.com/Open-Athena/ec2-gha/${action_sha}/src/ec2_gha/scripts/runner-setup.sh"
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Fetching main script from: $SCRIPT_URL (SHA: ${action_sha})" | tee -a /var/log/runner-setup.log
      
      # Try to download with retries
      for i in {1..5}; do
        if curl -sSL "$SCRIPT_URL" -o /tmp/runner-setup.sh; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
          break
        elif wget -q "$SCRIPT_URL" -O /tmp/runner-setup.sh; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
          break
        else
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] Failed to download script (attempt $i), retrying..." | tee -a /var/log/runner-setup.log
          sleep 2
        fi
      
        if [ $i -eq 5 ]; then
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Failed to download runner setup script after 5 attempts" | tee -a /var/log/runner-setup.log
          shutdown -h now
          exit 1
        fi
      done
      
      # Verify we got something
      if [ ! -s /tmp/runner-setup.sh ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Downloaded script is empty" | tee -a /var/log/runner-setup.log
        shutdown -h now
        exit 1
      fi
      
      # Make it executable and run it
      chmod +x /tmp/runner-setup.sh
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Executing runner setup script" | tee -a /var/log/runner-setup.log
      exec /tmp/runner-setup.sh
    ''',
  })
# ---
# name: test_build_user_data
  '''
  #!/bin/bash
  set -e
  
  # Essential variables from template substitution
  export debug=""
  export homedir="/home/ec2-user"
  export repo="omsf-eco-infra/awsinfratesting"
  export runner_tokens="test"
  export runner_labels="label"
  export cloudwatch_logs_group=""
  export runner_grace_period="61"
  export runner_initial_grace_period="181"
  export runner_poll_interval="11"
  export runner_registration_timeout="300"
  export max_instance_lifetime="360"
  export runners_per_instance="1"
  export runner_release="test.tar.gz"
  export ssh_pubkey="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC test@host"
  export instance_name=""
  export action_sha="abc123def456789012345678901234567890abcd"
  
  # Custom userdata from user (if any)
  export userdata=""
  export script="echo 'Hello, World!'"
  
  # Log prefixes
  export log_prefix_job_started="Job started:"
  export log_prefix_job_completed="Job completed:"
  
  # Fetch and execute the main script from GitHub
  # action_sha has already been resolved from action_ref in Python for security and consistency
  SCRIPT_URL="https://raw.githubusercontent.com/Open-Athena/ec2-gha/${action_sha}/src/ec2_gha/scripts/runner-setup.sh"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Fetching main script from: $SCRIPT_URL (SHA: ${action_sha})" | tee -a /var/log/runner-setup.log
  
  # Try to download with retries
  for i in {1..5}; do
    if curl -sSL "$SCRIPT_URL" -o /tmp/runner-setup.sh; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
      break
    elif wget -q "$SCRIPT_URL" -O /tmp/runner-setup.sh; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
      break
    else
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Failed to download script (attempt $i), retrying..." | tee -a /var/log/runner-setup.log
      sleep 2
    fi
  
    if [ $i -eq 5 ]; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Failed to download runner setup script after 5 attempts" | tee -a /var/log/runner-setup.log
      shutdown -h now
      exit 1
    fi
  done
  
  # Verify we got something
  if [ ! -s /tmp/runner-setup.sh ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Downloaded script is empty" | tee -a /var/log/runner-setup.log
    shutdown -h now
    exit 1
  fi
  
  # Make it executable and run it
  chmod +x /tmp/runner-setup.sh
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Executing runner setup script" | tee -a /var/log/runner-setup.log
  exec /tmp/runner-setup.sh
  '''
# ---
# name: test_build_user_data_with_cloudwatch
  '''
  #!/bin/bash
  set -e
  
  # Essential variables from template substitution
  export debug=""
  export homedir="/home/ec2-user"
  export repo="omsf-eco-infra/awsinfratesting"
  export runner_tokens="test"
  export runner_labels="label"
  export cloudwatch_logs_group="/aws/ec2/github-runners"
  export runner_grace_period="61"
  export runner_initial_grace_period="181"
  export runner_poll_interval="11"
  export runner_registration_timeout="300"
  export max_instance_lifetime="360"
  export runners_per_instance="1"
  export runner_release="test.tar.gz"
  export ssh_pubkey=""
  export instance_name=""
  export action_sha="abc123def456789012345678901234567890abcd"
  
  # Custom userdata from user (if any)
  export userdata=""
  export script="echo 'Hello, World!'"
  
  # Log prefixes
  export log_prefix_job_started="Job started:"
  export log_prefix_job_completed="Job completed:"
  
  # Fetch and execute the main script from GitHub
  # action_sha has already been resolved from action_ref in Python for security and consistency
  SCRIPT_URL="https://raw.githubusercontent.com/Open-Athena/ec2-gha/${action_sha}/src/ec2_gha/scripts/runner-setup.sh"
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Fetching main script from: $SCRIPT_URL (SHA: ${action_sha})" | tee -a /var/log/runner-setup.log
  
  # Try to download with retries
  for i in {1..5}; do
    if curl -sSL "$SCRIPT_URL" -o /tmp/runner-setup.sh; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
      break
    elif wget -q "$SCRIPT_URL" -O /tmp/runner-setup.sh; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Successfully downloaded runner setup script (attempt $i)" | tee -a /var/log/runner-setup.log
      break
    else
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] Failed to download script (attempt $i), retrying..." | tee -a /var/log/runner-setup.log
      sleep 2
    fi
  
    if [ $i -eq 5 ]; then
      echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Failed to download runner setup script after 5 attempts" | tee -a /var/log/runner-setup.log
      shutdown -h now
      exit 1
    fi
  done
  
  # Verify we got something
  if [ ! -s /tmp/runner-setup.sh ]; then
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: Downloaded script is empty" | tee -a /var/log/runner-setup.log
    shutdown -h now
    exit 1
  fi
  
  # Make it executable and run it
  chmod +x /tmp/runner-setup.sh
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] Executing runner setup script" | tee -a /var/log/runner-setup.log
  exec /tmp/runner-setup.sh
  '''
# ---
